<template>
    <div class="upload_container">
        <div class="file-list-preview" v-show="fileList.length">
            <div class="file_preview_container" v-for="item in fileList" :key="item.url">
                <el-tooltip effect="dark" :content="item.name" placement="top">
                    <div class="file_preview_item">
                        <!-- 图片 -->
                        <img class="file_icon_img" :src="item.url" alt="" v-if="item.type === 'image'">
                        <!-- word -->
                        <svg class="svg-icon file_icon_svg" aria-hidden="true" v-if="item.type === 'word'">
                            <use xlink:href="#word_icon"></use>
                        </svg>
                        <!-- excel-->
                        <svg class="svg-icon file_icon_svg" aria-hidden="true" v-if="item.type === 'excel'">
                            <use xlink:href="#excel_icon"></use>
                        </svg>
                        <!-- pdf -->
                        <svg class="svg-icon file_icon_svg" aria-hidden="true" v-if="item.type === 'pdf'">
                            <use xlink:href="#pdf_icon"></use>
                        </svg>
                        <!-- pm4 -->
                        <svg class="svg-icon file_icon_svg" aria-hidden="true" v-if="item.type === 'mp4'">
                            <use xlink:href="#mp4_icon"></use>
                        </svg>
                        <!-- pm3 -->
                        <svg class="svg-icon file_icon_svg" aria-hidden="true" v-if="item.type === 'mp3'">
                            <use xlink:href="#pm3_icon"></use>
                        </svg>
                        <!-- zip -->
                        <svg class="svg-icon file_icon_svg" aria-hidden="true" v-if="item.type === 'zip'">
                            <use xlink:href="#zip_icon"></use>
                        </svg>
                        <div class="mask">
                            <i class="el-icon-view" title="预览" @click.stop="preview(item.url)"></i>
                            <i class="el-icon-delete" title="删除" @click.stop="deletfile(item)" v-if="isEdit"></i>
                        </div>
                        <p class="file_name">{{item.name | formart-title(7)}}</p>
                    </div>
                </el-tooltip>
            </div>
        </div>
        <el-upload
            class="el_upload"
            ref="upload"
            :action="fileuploadUrl"
            :file-list="fileList"
            :on-change="fileChange"
            :on-success="uploadSuccess"
            :on-error="uploadFiled"
            :on-exceed="overfileuploadNumber"
            :beforeRemove="fileBerofeRemove"
            :on-remove="fileRemove"
            :on-progress="fileProgress"
            :limit='5'
            v-if="isEdit"
        >
            <el-button slot="trigger" size="small" type="success" :disabled="loading">选取文件</el-button>
            <!-- <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload">上传到服务器</el-button> -->
            <div slot="tip" class="el-upload__tip">只能上传 jpg、png、pdf、word、excel、zip、mp4、mp3 格式的文件，<br /> 单个文件最大1000MB，总数最多不超过5个</div>
        </el-upload>
    </div>
</template>
<script>
import fileApi from '@/api/file-api';
export default {
    name: 'upload-comp',
    props: {
        value: {
            type: Array,
            default: () => []
        },
        uploadUrl: {    
            type: String
        },
        isEdit: {
            type: Boolean,
            default: true
        }
    },
    data() {
        return {
            loading: false,
            fileList: this.value,
            fileuploadUrl: fileApi.uploadFiles( `uploadChildPath=${this.uploadUrl}`), // 上传文件地址 采购目录
        }
    },
    watch: {
        value: function(n) {
            this.fileList = n
            // 修改 v-model 数据
            this.$emit('input', n)
        },
    },
    methods: {
        // 附件上传保存
        submitUpload() {
            this.$refs.upload.submit();
        },
        // 上传文件 改变时
        fileChange(file, fileList) {
            console.log(file)
            if(file.status === "ready") {
                // 文件准备就绪未上传

                /* 
                    ms-excel    测试.xls
                    spreadsheetml.sheet     测试2.xlsx
                    wordprocessingml.document   测试3.docx
                    msword  测试4.doc
                    image/jpeg  测试5.jpg
                    image/png   测试6.png
                    application/x-zip-compressed    测试7.zip
                    application/pdf     测试8.pdf
                    video/mp4     测试8.mp4
                    audio/mpeg     测试8.mp3
                
                */
                const { raw } = file
                let reg = /(spreadsheetml|ms-excel|msword|wordprocessingml\.document|image|zip|pdf|video|audio)+/.test(raw.type);
                if (!reg) {
                    // 文件格式判断
                    this.$notify.error({
                        title: '异常',
                        message: `文件格式不对`
                    });
                    fileList.pop() 
                } else {
                    const over_size = file.size / 1024 / 1024 > 1000
                    if(over_size) {
                        this.$notify.error({
                            title: '异常',
                            message: `文件超出最大限制`
                        });
                        fileList.pop() 
                    }
                }
            }
        },
        // 文件在列表被移除前
        async fileBerofeRemove(file, fileList) {
            if(!this.isEdit) return // 非编辑不可删除
            if(file.status === 'success') {
                return new Promise((resvole, reject) => {
                    this.$confirm('该操作删除文件后不可找回，请谨慎操作?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(res =>{
                        Promise.all([fileApi.delServerFile({url: file.url}), file.id? fileApi.delete({id: file.id}):'']).then(res => {
                            const [resOne, resTwo] = res;
                            this.$message({type: 'success', message: '文件删除成功'})
                            resvole()
                        }).catch(err => {
                            this.$message({type: 'error', message: '文件删除失败'})
                            reject()
                        })
                    }).catch(err => console.log(err))
                })
            }
            if(file.status === "uploading") {
                this.$message({type: 'warning', message: '文件上传被取消'})
                this.loading = false
            }
        },
        // 文件在列表被移除后
        fileRemove(file, fileList) {
            console.log(file)
            const index = this.fileList.findIndex(item => item.uid === file.uid)
            this.fileList.splice(index, 1)
            // 修改 v-model 数据
            this.$emit('input', this.fileList)
        },
        // 文件上传成功
        uploadSuccess(response, file, fileList) {
            const { raw } = file
            const { data,  success} = response
            console.log(data)
            const { type } = raw;
            if(success && data[0]) {
                this.fileList.push({name: data[0].fileName, url: data[0].url, type: this.checkFileType(type)})
                this.$message({message: '文件上传成功', type: 'success'})
            } else {
                this.$message({message: '文件上传失败', type: 'warning'})
                fileList.pop() 
            }
            this.loading = false
            // 修改 v-model 数据
            this.$emit('input', this.fileList)
        },
        // 文件上传失败
        uploadFiled(err, file, fileList) {
            this.$message({message: '文件上传失败', type: 'warning'})
            this.loading = false
        },
        // 文件超出上传个数
        overfileuploadNumber(file, fileList) {
            this.$notify.error({
                title: '异常',
                message: `文件最多上传${fileList.length}个`
            });
        },
        // 文件上传时
        fileProgress(event) {
            const { percent } = event; 
            const disabled = this.$store.state.upload.uploading
            if(percent < 100) {
                if(!disabled) {
                    this.loading = true
                }
            } else {
                this.loading = false
            }
        },
        // 点击 预览大图删除
        deletfile(file) {
            if(!this.isEdit) return // 非编辑不可删除
            this.$confirm('该操作删除文件后不可找回，请谨慎操作?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
            }).then(resolve => {
                const index = this.fileList.findIndex(item => item.uid === file.uid)
                Promise.all([delServerFile({url: file.url}), file.id? fileApi.delete({id: file.id}):'']).then(res => {
                    const [resOne, resTwo] = res;
                    this.$message({type: 'success', message: '文件删除成功'})
                    this.fileList.splice(index, 1)
                }).catch(err => {
                    this.$message({type: 'error', message: '文件删除失败'})
                })
                // 修改 v-model 数据
                this.$emit('input', this.fileList)
            }).catch(err => console.log(err))
        },
        // 预览
        preview(url) {
            if(url) {
                window.open(url, '_blank')
            }
        },
        // check file type 判断文件类型，便于前端展示
        checkFileType(file_type) {
            let typeName;
            // (spreadsheetml|ms-excel|msword|wordprocessingml.document|image|x-zip-compressed|pdf|video|audio|pdf)
            if(file_type.includes('image')) typeName = 'image';
            if(file_type.includes('pdf')) typeName = 'pdf';
            if(file_type.includes('zip')) typeName = 'zip';
            if(file_type.includes('spreadsheetml') || file_type.includes('ms-excel')) typeName = 'excel';
            if(file_type.includes('msword') || file_type.includes('wordprocessingml.document')) typeName = 'word';
            if(file_type.includes('video')) typeName = 'mp4';
            if(file_type.includes('audio')) typeName = 'mp3';
            return typeName
        },
    }
}
</script>
<style lang="scss" scoped>
    .upload_container {
        .file-list-preview {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            margin-bottom: 20px;
            .file_preview_container {
                overflow: hidden;
                padding: 2px;
                box-sizing: border-box;
                width: 120px;
                height: 120px;
                margin-right: 5px;
                border-radius: 3px;
                border: 1px dashed #eeeeee;
                transition: all 0.2s ease-in-out;
                &:hover {
                    border-color: #3d83ef;
                    .file_preview_item {
                        .mask {
                            opacity: 1;
                        }
                    }
                }
                .file_preview_item {
                    position: relative;
                    height: 100%;
                    overflow: hidden;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    img {
                        width: 100%;
                    }
                    .mask {
                        opacity: 0;
                        background-color: rgba(0, 0, 0, 0.4);
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        z-index: 1;
                        transition: all 0.2s ease-in-out;
                        display: flex;
                        flex-direction: column;
                        justify-content: space-around;
                        align-items: center;
                        i {
                            color: #ffffff;
                            cursor: pointer;
                            font-size: 18px;
                            transition: all 0.2s ease-in-out;
                            &.el-icon-delete {
                                color: red;
                            }
                            &:hover {
                                transform: scale(1.2);
                            }
                        }
                    }
                    .file_name {
                        color: #ffffff;
                        position: absolute;
                        width: 100%;
                        bottom: 0;
                        left: 0;
                        text-align: center;
                        background-color: rgba(0, 0, 0, 0.5);
                        font-size: 12px;
                        line-height: 32px;
                    }
                }
            }
        }
    }
</style>